



Remote ATtestation procedureS                                     L. Xia
Internet-Draft                                                  W. Jiang
Intended status: Standards Track                     Huawei Technologies
Expires: 5 January 2026                                      4 July 2025


       Key Negotiation Scheme Integrated into Remote Attestation
           draft-xia-rats-key-negotiation-integration-latest

Abstract

   This draft proposes a lightweight security enhancement scheme based
   on remote attestation—key negotiation integrated into remote
   attestation.  Organically integrating the key steps of E2E key
   negotiation into the remote attestation process provide more secure
   and flexibility.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-xia-rats-key-negotiation-
   integration/.

   Discussion of this document takes place on the Remote ATtestation
   ProcedureS Working Group mailing list (mailto:rats@ietf.org), which
   is archived at https://mailarchive.ietf.org/arch/browse/rats/.
   Subscribe at https://www.ietf.org/mailman/listinfo/rats/.

   Source for this draft and an issue tracker can be found at
   https://github.com/ietf-rats/draft-xia-rats-key-negotiation-
   integration.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 5 January 2026.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Integration Scheme
     2.1.  Key Distribution Based on KMS Integrated with Remote
           Attestation
     2.2.  Integrating E2E Key Negotiation Into Remote Attestation
   3.  Use of Negotiated Keys in Different Security Protocols
   4.  Remote Attestation Protocol and Message Extensions
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Authors' Addresses

1.  Introduction

   Remote attestation is a security mechanism based on trusted hardware
   (e.g., TPM, TEE), allowing remote verifiers to cryptographically
   verify the integrity of the target device's software configuration,
   hardware state, and runtime environment.  The RATS protocol can
   effectively prove the overall security of the endpoint.  Security
   channel protocols (e.g., TLS, QUIC, IPSec, SSH, etc.) establish end-
   to-end secure channels based on the authentication of the endpoint's
   legitimate identity and secure key negotiation, ensuring the security
   of network communication.  By organically combining remote
   attestation protocols with security channel protocols and
   establishing automatic associations between them, it is possible to
   achieve a logical binding of endpoint security and network security,
   ensuring dual verification and protection of the endpoint identity
   and endpoint system security in secure connections.  AttestedTLS is
   currently an important related work in the industry, and other
   similar works include binding remote attestation with credential
   issuance (e.g., certificates, OAuth tokens, etc.) to achieve security
   enhancement.

   However, in some scenarios, the above binding may not always be
   possible.  For example:

   *  Scenario 1: When tenants in a public cloud/compute cluster deploy
      workloads, they need to first verify their runtime environment's
      security through remote attestation before requesting KMS to
      assign application-layer data keys to the VM/compute node where
      the workload resides.  At this point, these keys are used for
      application-layer data encryption and are not used for any secure
      channel protocols, such as file encryption or disk encryption.
      For example, to protect model parameters from leakage and
      tampering, model weights and other parameters need to be encrypted
      before model loading and transmitted to a trusted execution
      environment.  At this time, it is necessary to ensure that only
      the trusted execution environment has the key and decrypts it;

   *  Scenario 2: The end user/client accesses the online TEE computing
      environment, submits their data for business processing or large
      model inference, and needs to ensure the security of the entire
      computing environment through remote attestation before
      establishing a secure connection.  At this point, there are
      multiple options for the secure connection protocol that can be
      established, such as TLS, IPSec, QUIC, OHTTP, etc.  The user may
      only need to complete E2E key negotiation based on remote
      attestation.  As for what security protocol or application layer
      encryption the negotiated key is used for, and how it is used,
      there can be various implementation methods.

   In summary, considering the diversity of remote attestation
   application scenarios and the limitations or complexity of combining
   with security protocols, this draft proposes a lightweight security
   enhancement scheme based on remote attestation—key negotiation
   integrated into remote attestation.  By organically integrating the
   key steps of E2E key negotiation into the remote attestation process,
   the following can be achieved: * The key distribution of KMS or E2E
   key negotiation can be automatically completed based on remote
   attestation, improving the security of key negotiation; * The keys
   negotiated automatically can be flexibly applied in various ways,
   whether for security protocols or application layer encryption; *
   Compared to the complete and systematic implementation of
   AttestedTLS, a more lightweight implementation can be provided.

2.  Integration Scheme

2.1.  Key Distribution Based on KMS Integrated with Remote Attestation

   The KMS mechanism on public cloud networks includes trust root and
   secure channels, full lifecycle management of keys (including key
   generation, storage, rotation, and destruction), hierarchical
   encryption architecture (such as Envelope Encryption), and access
   control mechanisms.  KMS enables applications to generate/obtain
   their own application-layer encryption symmetric/asymmetric keys and
   distribute these keys between the required applications.
   Furthermore, the method of integrating key distribution into the
   remote attestation interaction process is shown in the following
   diagram:

         .------------.
         |            | Compare Evidence
         |  Verifier  | against appraisal policy
         |            |
         '--------+---'
             ^    |
    Evidence |    | Attestation
             |    | Result
             |    v
         .---+--------.              .-------------.
         |            +------------->|   Relying   | Compare Attestation
         |  Attester  | Attestation  |    Party    | Result against
         |            | Result       |    & KMS    | appraisal policy
         '------------' + SK/ASK/ESK '-------------' + Distribute Keys

   SK：Symmetric Key
   ASK：Asymmetric Key
   ESK：Encrypted Symmetric Key

       Figure 1: Key Distribution Based on KMS Integrated with Remote
                                Attestation

   In the standard remote attestation process described above, the
   Attester can generate and provide / request the Attester's
   application layer SK / ASK / ESK keys in the result returned to the
   KMS.  The KMS can generate or distribute these keys accordingly.
   During key rotation, the KMS can proactively trigger the above
   process to complete the update and rotation of the new and old keys.

2.2.  Integrating E2E Key Negotiation Into Remote Attestation

   The current main implementation mechanism for E2E key negotiation is
   DHE and ECDHE.  Taking ECDHE as an example, the method of integrating
   it into remote attestation is shown in the following figure:

         .------------.
         |            | Compare Evidence
         |  Verifier  | against appraisal policy
         |            |
         '--------+---'
             ^    |
    Evidence |    | Attestation
             |    | Result
             |    v     Attestation
         .---+--------. Request + Q_A.-------------.
         |  Attester  <------------->|   Relying   | Compare Attestation
         |  &Server   | Attestation  |    Party    | Result against
         |            | Result       |    & Client | appraisal policy
         '------------' + Q_B        '-------------' + S = d_A * Q_B
          S = d_B * Q_A

     Figure 2: Integrating E2E Key Negotiation Into Remote Attestation

   In the standard remote attestation process described above, the
   Client includes the public key Q_A from its dynamically generated
   ECDHE key pair (Q_A, d_A) in the remote attestation request message,
   while retaining its private key d_A.  Upon receiving Q_A, the Server
   can compute the symmetric key S using its private key d_B from its
   dynamically generated ECDHE key pair (Q_B, d_B).  After completing
   the remote attestation with the Verifier, the Server includes its Q_B
   in the Attestation Result returned to the Client.  Once the Client
   verifies the Attestation Result, it can compute the symmetric key S
   using Q_B and its own private key d_A, thereby completing both the
   attestation and ECDHE key agreement.

3.  Use of Negotiated Keys in Different Security Protocols

   Through the above process, key negotiation/distribution is completed
   during the remote attestation process, and is synchronized based on
   the results of the remote attestation.  If the negotiated key is used
   for application layer encryption, its specific usage is strongly
   related to the application and can be very flexible.  When the key is
   used for the security protocols, such as TLS, IPSec, etc., there are
   at least the following binding methods:

   *  TLS: The negotiated key can be used as a pre-shared key for
      subsequent TLS handshakes; the key can also be used as an
      externally imported shared key to participate in TLS Hybrid key
      exchange[I-D.ietf-tls-hybrid-design];

   *  IPSec: The negotiated key can be used as a pre-shared key for
      subsequent IKEv2 handshakes; or the key can be directly used as a
      session key for data plane encryption and integrity protection in
      IPSec ESP; or the key can also be used as Post-quantum Preshared
      Keys (PPKs)[RFC8784] to achieve binding with the IPSec protocol.

4.  Remote Attestation Protocol and Message Extensions

   This section describes how to extend RATS protocol and message to
   incorporate key negotiation into the remote attestation process.

   TBD

5.  Security Considerations

   TBD

6.  IANA Considerations

   TBD

7.  References

7.1.  Normative References

   [RFC8784]  Fluhrer, S., Kampanakis, P., McGrew, D., and V. Smyslov,
              "Mixing Preshared Keys in the Internet Key Exchange
              Protocol Version 2 (IKEv2) for Post-quantum Security",
              RFC 8784, DOI 10.17487/RFC8784, June 2020,
              <https://www.rfc-editor.org/rfc/rfc8784>.

7.2.  Informative References

   [I-D.ietf-tls-hybrid-design]
              Stebila, D., Fluhrer, S., and S. Gueron, "Hybrid key
              exchange in TLS 1.3", Work in Progress, Internet-Draft,
              draft-ietf-tls-hybrid-design-13, 17 June 2025,
              <https://datatracker.ietf.org/doc/html/draft-ietf-tls-
              hybrid-design-13>.

Authors' Addresses

   Liang Xia
   Huawei Technologies
   Email: frank.xialiang@huawei.com


   Weiyu Jiang
   Huawei Technologies
   Email: jiangweiyu1@huawei.com
